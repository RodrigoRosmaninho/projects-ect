library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

entity CounterDownBCD is
	port(clk       : in  std_logic;
		  enable    : in  std_logic;
		  load      : in  std_logic;
		  input     : in  std_logic_vector(15 downto 0);
		  output    : out std_logic_vector(15 downto 0);
		  timerEnd  : out std_logic);
end CounterDownBCD;

architecture Behav of CounterDownBCD is
	
	signal s_time : std_logic_vector(15 downto 0) := "0101100101011001";

begin

	process(clk)
	begin
		if(rising_edge(clk)) then
			if(load = '1') then
				s_time <= input;
				timerEnd <= '0';
			elsif(enable = '1') then
				if(s_time(3 downto 0) = "0000") then
					if(s_time(7 downto 4) = "0000") then
						if(s_time(11 downto 8) = "0000") then
							if(s_time(15 downto 12) = "0000") then
								s_time <= (others => '0');
								timerEnd <= '1';
							else
								s_time <= std_logic_vector(unsigned(s_time(15 downto 12)) - 1) & "100101011001";
								timerEnd <= '0';
							end if;
						else
							s_time <= s_time(15 downto 12) & std_logic_vector(unsigned(s_time(11 downto 8)) - 1) & "01011001";
							timerEnd <= '0';
						end if;
					else
						s_time <= s_time(15 downto 8) & std_logic_vector(unsigned(s_time(7 downto 4)) - 1) & "1001";
						timerEnd <= '0';
					end if;
				else
					s_time <= s_time(15 downto 4) & std_logic_vector(unsigned(s_time(3 downto 0)) - 1);
					if(s_time = "0000000000000001") then
						timerEnd <= '1';
					else
						timerEnd <= '0';
					end if;
				end if;
			end if;
		end if;
		
	output <= s_time;
	
	end process;
end Behav;