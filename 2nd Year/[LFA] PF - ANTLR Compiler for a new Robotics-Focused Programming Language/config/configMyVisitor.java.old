// Generated from config.g4 by ANTLR 4.7.2

package config;
import lib.*;
import org.antlr.v4.runtime.tree.AbstractParseTreeVisitor;

import java.lang.reflect.Method;

import java.util.*;

import java.util.stream.*;


public class configMyVisitor extends configBaseVisitor<Object>{

    @Override
    public Object visitProgram(configParser.ProgramContext ctx) {
        return visitChildren(ctx);
    }

    @Override
    public Object visitHeader(configParser.HeaderContext ctx) {

        Header.setHeader(ctx.content.getText());

        return visitChildren(ctx);
    }


    @Override
    public Object visitCalls(configParser.CallsContext ctx) {

        return visitChildren(ctx);
    }

    @Override
    public Object visitCall(configParser.CallContext ctx) {


        Call call = new Call(ctx.STRING().getText().substring(1, ctx.STRING().getText().length()-1));
        LinkedList<Argument> args = null;
        List<String> argNames = new ArrayList<>();
        Type returnType = null;
        configParser.MethodsContext methodsCtx = (configParser.MethodsContext)visit(ctx.methods());

        if(ctx.vars() != null){
            args = (LinkedList<Argument>)visit(ctx.vars());

            argNames = args.stream().map(argument -> argument.getName()).collect(Collectors.toList());
        }

        if(ctx.returnType() != null) returnType = (Type)visit(ctx.returnType());

        int i = 0;
        configParser.MethodContext methodCtx;
        methodCtx = methodsCtx.method(i++);
        while(methodCtx != null){

            String[] array = (String[])visit(methodCtx);

            String template = array[array.length-1];
            String[] arguments = new String[array.length-1];
            if(args == null && arguments.length > 0){
                //error handling call nao tem argumentos declarados
                System.exit(1);
            }

            for(int j = 0; j < arguments.length; j++){

                arguments[j] = array[j];
                if(!argNames.contains(arguments[j])){
                    //error handling call nao contem este argumento
                    System.exit(1);
                }

            }

            call.addMetod(arguments,template);

            methodCtx = methodsCtx.method(i++);

        }

        if(args != null){
            for(Argument arg : args) {
                call.addArg(arg);
            }
        }
        if(returnType != null){
            call.setReturnType(returnType);
        }

        System.out.println(call.getName());
        System.out.println(call.getArgs().toString());
        System.out.println(call.getTableOfMetods().toString());
        System.out.printf("\n\n\n");

        return visitChildren(ctx);
    }

    @Override
    public Object visitReturnType(configParser.ReturnTypeContext ctx) {

        return ctx.type().res;
    }

    @Override
    public Object visitVars(configParser.VarsContext ctx) {


        LinkedList<Argument> list = new LinkedList<>();

        int i =0;
        configParser.VarContext var = ctx.var(i++);
        while(var != null){

            list.add((Argument)visit(var));
            var = ctx.var(i++);

        }

        return list;
    }

    @Override
    public Object visitVar(configParser.VarContext ctx) {
        visit(ctx.STRING());
        Argument arg = new Argument(ctx.type().res,ctx.STRING().getText().substring(1, ctx.STRING().getText().length()-1));

        if(ctx.interval() != null) {
            Argument auxInterval = (Argument) visit(ctx.interval());
            arg.setInterval(auxInterval.getMax(),auxInterval.getMin());

            if(ctx.message() != null) {
                String msg = (String) visit(ctx.message());
                arg.setErrorMesg(msg);
            }
        }

        return arg;
    }

    @Override
    public Object visitInterval(configParser.IntervalContext ctx) {
        visitChildren(ctx);
        double min,max;
        if(ctx.min != null){
            min = Double.parseDouble(ctx.min.getText());
        }else{
            min = Double.MIN_VALUE;
        }
        if(ctx.max != null){
            max = Double.parseDouble(ctx.max.getText());
        }else{
            max = Double.MAX_VALUE;
        }
        Argument arg = new Argument(null,null,max,min);
        return arg;
    }

    @Override
    public Object visitMessage(configParser.MessageContext ctx) {

        return ctx.STRING().getText().substring(0,ctx.STRING().getText().length()-1);
    }

    @Override
    public Object visitMethods(configParser.MethodsContext ctx) {
        return ctx;
    }

    @Override
    public Object visitMethod(configParser.MethodContext ctx) {
        String[] array = new String[ctx.Name().size()+1];
        int i;
        for(i = 0; i < array.length-1; i++){
            array[i] = ctx.Name(i).getText();
        }
        array[i] = ctx.STRING().getText().substring(1,ctx.STRING().getText().length()-1);
        return array;
    }

    @Override
    public Object visitType(configParser.TypeContext ctx) {
        return visitChildren(ctx); }
}