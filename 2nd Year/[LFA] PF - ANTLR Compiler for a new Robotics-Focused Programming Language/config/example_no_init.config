header :
#include <stdio.h>
#include "CiberAV.h"

void stop(){
	motors(0,0);
	apply(1);
}
end

define:
    "FRONTSENSOR"   : int
    "LEFTSENSOR"    : int
    "RIGHTSENSOR"   : int
    "REARSENSOR"    : int
end

calls:
	call "stop":
		methods:
			[] : "stop()"
		end
	end
    call "init":
        vars:
            "name" : string [1:] "Name can not be empty"
            "pos"  : int [:] ""
            "host" : string [:] ""
        end
        methods:
            [name, pos] : "init(<name>,<pos>)"
            [name, pos, host] : "init2(<name>,<pos>,<host>)"
        end
    end

    call "print":
        vars:
            "str" : string [:] ""
            "value" : int [:] ""
        end
        methods:
            [str] : "printStr(<str>)"
            [value] : "printValue(<value>)"
        end
    end

    call "apply":
        apply
        vars:
            "time" : int [0:] ""
            "var"  : int [0:] ""
        end
        methods:
            [time] : "apply(<time>)"
            [var]  : "apply(<var>)"
        end
    end

    call "end":
        methods:
            [] : "end()"
        end
    end

    call "motors":
        critical
        vars:
            "right" : int [-150:150] "power out of range"
            "left"  : int [-150:150] "power out of range"
            "var"   : int [-150:150] "power out of range"
        end
        methods:
            [] : "motors(50,50)"
            [var] : "motors(<var>,<var>)"
            [left, right] : "motors(<left>,<right>)"
        end
    end

    call "pickup":
        methods:
            [] : "pickup()"
        end
    end

    call "returning":
        methods:
            [] : "returning()"
        end
    end

    call "finish":
        methods:
            [] : "finish()"
        end
    end

    call "distance":
        critical
        return: int end
        vars:
            "sensor" : int [0:3] "sensor does not exist"
            "var" : int [0:3] "sensor does not exist"
        end
        methods:
            [sensor] : "obstacleDistance(<sensor>)"
            [var] : "obstacleDistance(<var>)"
        end
    end

    call "groundType":
        critical
        return: int end
        methods:
            [] : "groundType()"
        end
    end

    call "beaconAngle":
        critical
        return: int end
        vars:
            "id" : int [:] ""
            "var" : int [:] ""
        end
        methods:
            [id] : "beaconAngle(<id>)"
            [var] : "beaconAngle(<id>)"
        end
    end
    call "north":
        critical
        return: int end
        methods:
            [] : "northAngle()"
        end
    end
    call "onTarget":
        critical
        return: bool end
        vars:
            "id" : int [:] ""
            "var" : int [:] ""
        end
        methods:
            [id] : "onTarget(<id>)"
            [var] : "onTarget(<var>)"
        end
    end
    call "numberOfBeacons":
        critical
        return: int end
        methods:
            [] : "numberOfBeacons()"
        end
    end
    call "startAngle":
        critical
        return: int end
        methods:
            [] : "startAngle()"
        end
    end
    call "startDistance":
        critical
        return: int end
        methods:
            [] : "startDistance()"
        end
    end
end
